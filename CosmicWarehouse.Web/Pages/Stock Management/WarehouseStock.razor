@page "/stock/warehouse"

@using Models
@using CosmicWarehouse.Web.Components
@using CosmicWarehouse.Domain.ViewModels

@inject IHttpClientFactory _clientFactory

<h1>@pageTitle</h1>

@if (stockItems is null)
{
    <p><em>Loading...</em></p>
}
else if (!string.IsNullOrEmpty(errorString))
{
    <p>
        <div class="alert-danger">@errorString</div>
    </p>
}
else
{

    <div class="row" style="padding-bottom: 2rem">
        <div class="col-5">
            <WarehouseSelector OnWarehouseChange="OnWarehouseChange"></WarehouseSelector>
        </div>
        <div class="col-1"></div>
        <div>
            <LocationSelector WarehouseId="selectedWarehouse?.Id" OnLocationChange="OnLocationChange"></LocationSelector>
        </div>
    </div>
    <div class="row" style="padding-bottom: 2rem">
        @if (selectedWarehouse is not null)
        {
            <div class="card col-5">

                <div class="card-body">
                    <h5 class="card-title">@selectedWarehouse.Name</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@(selectedWarehouse.Active ? "Active" : "Inactive") warehouse</h6>
                    <p class="card-text">@selectedWarehouse.Description</p>
                </div>
            </div>
        }
        <div class="col-1"></div>
        @if (selectedLocation is not null)
        {
            <div class="card col-5">

                <div class="card-body">
                    <h5 class="card-title">@selectedLocation.Name</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@(selectedLocation.Active ? "Active" : "Inactive") location</h6>
                    <p class="card-text">@selectedLocation.Description</p>
                </div>
            </div>
        }
        </div>
    <div>
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Quantity</th>
                    <th>Weight</th>
                    <th>Location</th>
                    <th>Warehouse</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in stockItems)
                {
                    <tr>
                        <td>@item.ItemId</td>
                        <td>@item.ItemName</td>
                        <td>@item.ItemDescription</td>
                        <td>@item.Quantity</td>
                        <td>@item.Weight</td>
                        <td>@item.LocationName</td>
                        <td>@item.WarehouseName</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

        @code {
    private string pageTitle = "Warehouse Stock";
        private HttpClient client;

        private IEnumerable<StockVM> stockItems;
        private string errorString;

        private WarehouseVM selectedWarehouse;
        private LocationVM selectedLocation;

        protected override void OnInitialized()
        {
            client = _clientFactory.CreateClient(DataSource.WAREHOUSE_API);

            stockItems = new List<StockVM>();
        }

        private void OnWarehouseChange(WarehouseVM warehouse)
        {
            selectedWarehouse = warehouse;
        }

        private async Task OnLocationChange(LocationVM location)
        {
            selectedLocation = location;
            await LoadData();
        }

        private async Task LoadData()
        {
            try
            {
                if (selectedWarehouse is not null && selectedLocation is not null)
                {
                    var url = $"Stock/GetStock?warehouseId={selectedWarehouse.Id}&locationId={selectedLocation.Id}";

                    stockItems = await client.GetFromJsonAsync<IEnumerable<StockVM>>(url);
                }
            }
            catch (Exception ex)
            {
                errorString = ex.Message;
            }
        }
        }
